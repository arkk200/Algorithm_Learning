- 계수 정렬 -

『 크기를 기준으로 개수를 센다. 』

계수 정렬은 
"5이하의 자연수 데이터들을 오름차순으로 정렬하세요." 처럼 
범위 조건이 있는 경우 굉장히 빠른 알고리즘이다. 
무려 O(N)의 시간 복잡도를 같는다.





- 과정 -

데이터 입력 범위가 5이하인 자연수라고 할 때 
입력되는 데이터의 값은 5개이므로
크기가 5인 배열을 만들어준다.

초기상태
크기: 1 | 2 | 3 | 4 | 5
개수: 0   0   0   0   0

1, 3, 2, 4, 3, 2, 5, 3, 1, 2, 3, 4, 4, 3, 5, 1, 2, 3, 5, 2, 3, 1, 4, 3, 5, 1, 2, 1, 1, 1
의 데이터가 주어졌을 때 첫번째부터 살펴보면 
값이 1이므로 
만들었던 크기가 5인 배열에서 
크기가 1인 값을 1 더해준다.

1번째 값: 1
=> 1 | 2 | 3 | 4 | 5
   1   0   0   0   0

2번째 값: 3
=> 1 | 2 | 3 | 4 | 5
   1   0   1   0   0

3번째 값: 2
=> 1 | 2 | 3 | 4 | 5
   1   1   1   0   0

4번째 값: 4
=> 1 | 2 | 3 | 4 | 5
   1   1   1   1   0

5번째 값: 3
=> 1 | 2 | 3 | 4 | 5
   1   1   2   1   0

6번째 값: 2
=> 1 | 2 | 3 | 4 | 5
   1   2   2   1   0

7번째 값: 5
=> 1 | 2 | 3 | 4 | 5
   1   2   2   1   1

8번째 값: 3
=> 1 | 2 | 3 | 4 | 5
   1   2   3   1   1

9번째 값: 1
=> 1 | 2 | 3 | 4 | 5
   2   2   3   1   1

10번째 값: 2
=> 1 | 2 | 3 | 4 | 5
   2   3   3   1   1

...
=> 1 | 2 | 3 | 4 | 5
   8   6   8   4   4

이런식으로 계속 더해주면 된다.
출력할 때는 단순하게 
앞에서부터 뒤로 이동하면서 
그 크기에 해당하는 값만큼 
크기를 출력해주면 된다.
(여기선 1을 8번, 2를 6번, 3을 8번, 4를 4번, 5를 5번 
순서대로 출력한다.)





- 시간복잡도 -

『 계수 정렬의 전체 시간 복잡도는 O(N)입니다. 』

계수 정렬은 입력되는 데이터의 크기에 의존하기에 
크기가 정해져있으면 사용하기 어려워 
잘 사용하는 알고리즘은 아니다.